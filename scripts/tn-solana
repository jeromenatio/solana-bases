#!/bin/bash

# Exit if any command fails
set -e

# Check if sufficient arguments are provided
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <solana_version> <yellowstone_version>"
    exit 1
fi

# Capture command line arguments
SOLANA_VERSION=$1
YELLOWSTONE_VERSION=$2

# Update and install necessary packages
sudo apt update && sudo apt install -y curl git libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make libsasl2-dev

# Install Rust and Cargo using Rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Activate Rust environment without restarting the session
source $HOME/.cargo/env

# Install Solana using the specified version
sh -c "$(curl -sSfL https://release.solana.com/$SOLANA_VERSION/install)"

# Update PATH in .bashrc if not already added
export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

# Reload .bashrc to update the path
source $HOME/.profile

# Set Solana to use the Mainnet
solana config set --url https://api.mainnet-beta.solana.com

# Setup directory for plugins
if [ ! -d "$HOME/plugins" ]; then
  mkdir -p $HOME/plugins
  sudo chown solanauser:solanauser $HOME/plugins
fi
cd $HOME/plugins

#Delete plugins if exists
sudo rm $HOME/plugins/yellowstone-grpc -R

# Clone the specific version of yellowstone-grpc
git clone https://github.com/rpcpool/yellowstone-grpc.git
cd yellowstone-grpc
git checkout $YELLOWSTONE_VERSION

# Build and install using Cargo
unset SASL2_STATIC
cargo build --release

# Replace the configuration file with optimized settings
cat <<EOF >yellowstone-grpc-geyser/config.json
{
  "libpath": "../target/release/libyellowstone_grpc_geyser.so",
  "log": {
    "level": "info"
  },
  "grpc": {
    "address": "0.0.0.0:10000",
    "max_decoding_message_size": "4_194_304",
    "snapshot_plugin_channel_capacity": "100_000_000",
    "snapshot_client_channel_capacity": "100_000_000",
    "channel_capacity": "1_000_000",
    "unary_concurrency_limit": 500,
    "unary_disabled": false
  },
  "prometheus": {
    "address": "0.0.0.0:8999"
  },
  "block_fail_action": "log"
}
EOF

# Create solana accounts
echo "Creating solana identity keypair"
solana-keygen new

# Download service and validator script
BASE_URL="https://raw.githubusercontent.com/jeromenatio/solana-bases/main/scripts"
SCRIPTS_DIR="/home/solanauser/scripts"
SERVICE_DIR="/etc/systemd/system"

# Create scripts directory if it does not exist and set ownership
if [ ! -d "$SCRIPTS_DIR" ]; then
    echo "Creating scripts directory..."
    mkdir -p "$SCRIPTS_DIR"
    sudo chown solanauser:solanauser "$SCRIPTS_DIR"
    echo "Scripts directory created and ownership set to solanauser:solanauser."
fi

# Downloading files
echo "Downloading Solana validator script..."
sudo wget -q -O "$SCRIPTS_DIR/solana-validator.sh" "$BASE_URL/solana-validator.sh" || { echo "Failed to download script"; exit 1; }

echo "Downloading Solana validator service file..."
sudo wget -q -O "$SERVICE_DIR/solana-validator.service" "$BASE_URL/solana-validator.service" || { echo "Failed to download service file"; exit 1; }

# Setting executable permissions on script
echo "Setting executable permissions on script..."
sudo chmod +x "$SCRIPTS_DIR/solana-validator.sh"

# Setting ownership and permissions on service file
echo "Setting ownership and permissions on service file..."
sudo chown root:root "$SERVICE_DIR/solana-validator.service"
sudo chmod 644 "$SERVICE_DIR/solana-validator.service"
sudo systemctl daemon-reload
sudo systemctl enable solana-validator.service

# Verify installations
echo "Rust version:"
rustc --version

echo "Cargo version:"
cargo --version

echo "Solana version:"
solana --version

echo "Current Solana Configuration:"
solana config get

echo "Setup complete! Solana and yellowstone-grpc are installed at $HOME/plugins."
